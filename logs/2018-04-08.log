2018-04-08 22:38:35,133 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-08 22:38:35,134 ERROR [Logger.py:53]  not all arguments converted during string formatting
2018-04-08 22:39:26,526 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-08 22:39:26,529 ERROR [Logger.py:53]  not all arguments converted during string formatting
2018-04-08 22:39:28,042 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-08 22:39:28,043 ERROR [Logger.py:53]  not all arguments converted during string formatting
2018-04-08 22:42:04,681 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-08 22:42:04,683 INFO [Logger.py:47]  the result: ((5,), (6,), (7,), (20,), (21,), (22,), (23,), (24,), (26,), (27,), (28,), (29,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,))
2018-04-08 22:42:50,884 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 22:42:50,887 INFO [Logger.py:47]  the result: ((5, '??', 'tenberg', '500', 10464), (6, '????', 'sumavision', 'C00', 10471), (7, '??', 'DELL', 'D00', None), (20, '???', 'NF200', 'NF200', None), (21, '???', 'NF600', 'NF600', None), (22, '???', 'NF1000', 'NF1000', None), (23, '???', 'NF1600', 'NF1600', None), (24, '???', 'NF2000', 'NF2000', None), (26, '???', 'A280', 'A280', None), (27, '???', 'A380', 'A380', 10471), (28, '???', 'A680', 'A680', None), (29, '???', 'A980', 'A980', None), (31, '???', 'S280', 'S280', None), (32, '???', 'S380', 'S380', None), (33, '???', 'S680', 'S680', None), (34, '???', 'S980', 'S980', None), (35, '???', 'S1080', 'S1080', None), (36, '???', 'NOAS100', 'NOAS100', None), (37, '???', 'NOAS500', 'NOAS500', None), (38, '???', 'NOAS1000', 'NOAS1000', None))
2018-04-08 22:44:58,021 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 22:45:02,740 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 22:49:32,723 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 22:49:32,726 ERROR [Logger.py:53]  'tuple' object has no attribute 'decode'
2018-04-08 22:49:53,732 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 22:49:53,734 ERROR [Logger.py:53]  'tuple' object has no attribute 'decode'
2018-04-08 22:50:55,122 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 22:50:55,125 INFO [Logger.py:47]  the result: ((5, '??', 'tenberg', '500', 10464), (6, '????', 'sumavision', 'C00', 10471), (7, '??', 'DELL', 'D00', None), (20, '???', 'NF200', 'NF200', None), (21, '???', 'NF600', 'NF600', None), (22, '???', 'NF1000', 'NF1000', None), (23, '???', 'NF1600', 'NF1600', None), (24, '???', 'NF2000', 'NF2000', None), (26, '???', 'A280', 'A280', None), (27, '???', 'A380', 'A380', 10471), (28, '???', 'A680', 'A680', None), (29, '???', 'A980', 'A980', None), (31, '???', 'S280', 'S280', None), (32, '???', 'S380', 'S380', None), (33, '???', 'S680', 'S680', None), (34, '???', 'S980', 'S980', None), (35, '???', 'S1080', 'S1080', None), (36, '???', 'NOAS100', 'NOAS100', None), (37, '???', 'NOAS500', 'NOAS500', None), (38, '???', 'NOAS1000', 'NOAS1000', None))
2018-04-08 22:51:44,945 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 23:00:50,972 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 23:12:15,089 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 23:17:46,629 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 23:17:49,378 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 23:22:44,506 INFO [Logger.py:47]  select * from bmp_manufacturers limit 20
2018-04-08 23:22:44,507 INFO [Logger.py:47]  the result: ((5, '腾博', 'tenberg', '500', 10464), (6, '数码视讯', 'sumavision', 'C00', 10471), (7, '戴尔', 'DELL', 'D00', None), (20, '安信华', 'NF200', 'NF200', None), (21, '安信华', 'NF600', 'NF600', None), (22, '安信华', 'NF1000', 'NF1000', None), (23, '安信华', 'NF1600', 'NF1600', None), (24, '安信华', 'NF2000', 'NF2000', None), (26, '安信华', 'A280', 'A280', None), (27, '安信华', 'A380', 'A380', 10471), (28, '安信华', 'A680', 'A680', None), (29, '安信华', 'A980', 'A980', None), (31, '安信华', 'S280', 'S280', None), (32, '安信华', 'S380', 'S380', None), (33, '安信华', 'S680', 'S680', None), (34, '安信华', 'S980', 'S980', None), (35, '安信华', 'S1080', 'S1080', None), (36, '安信华', 'NOAS100', 'NOAS100', None), (37, '安信华', 'NOAS500', 'NOAS500', None), (38, '安信华', 'NOAS1000', 'NOAS1000', None))
2018-04-08 23:23:32,697 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-08 23:23:32,698 INFO [Logger.py:47]  the result: ((5,), (6,), (7,), (20,), (21,), (22,), (23,), (24,), (26,), (27,), (28,), (29,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,))
2018-04-08 23:25:31,995 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-08 23:25:31,996 INFO [Logger.py:47]  the result: ((5,), (6,), (7,), (20,), (21,), (22,), (23,), (24,), (26,), (27,), (28,), (29,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,))
2018-04-08 23:38:58,183 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:39:28,325 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:39:38,163 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:39:45,691 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:39:58,893 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:43:26,945 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:44:41,256 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:46:08,321 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:51:08,394 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:54:39,644 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:54:39,646 INFO [Logger.py:47]  paras xml get tag value ['5', '6', '7', '20', '21', '22', '23', '24', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38']
2018-04-08 23:59:40,148 INFO [Logger.py:47]  start test manufacturer
2018-04-08 23:59:40,525 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/bmpObjQuery.xml
2018-04-08 23:59:40,527 INFO [Logger.py:47]  正则模型：['<test1>(.*?)</test1>', '<node2>(.*?)</node2>', '<node3>(.*?)</node3>', '<manufacturer>(.*?)</manufacturer>']
2018-04-08 23:59:40,528 INFO [Logger.py:47]  获取参数：['<SqlQuery><IsPageResult>1</IsPageResult><PageInfo><PageSize>20</PageSize><CurrentPage>1</CurrentPage><RowCount>0</RowCount><PageCount>0</PageCount><OrderBy></OrderBy></PageInfo><QueryTable><TableName>BMP_MANUFACTURERS</TableName><AliasName></AliasName></QueryTable><OrderString></OrderString><Conditions></Conditions></SqlQuery>']
2018-04-08 23:59:40,529 INFO [Logger.py:47]  匹配正则: <manufacturer>(.*?)</manufacturer>
2018-04-08 23:59:40,557 INFO [Logger.py:47]  the result is (WSResult){
   errorCode = 0
   errorString = None
   resultVal = "<?xml version="1.0" encoding="UTF-8"?>
<RecordSet><Record><MAN_ID type="INT">5</MAN_ID><MAN_NAME type="VARCHAR">腾博</MAN_NAME><MAN_DESC type="VARCHAR">tenberg</MAN_DESC><FIELD_1 type="VARCHAR">500</FIELD_1><CLASS_ID type="INT">10464</CLASS_ID></Record><Record><MAN_ID>6</MAN_ID><MAN_NAME>数码视讯</MAN_NAME><MAN_DESC>sumavision</MAN_DESC><FIELD_1>C00</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>7</MAN_ID><MAN_NAME>戴尔</MAN_NAME><MAN_DESC>DELL</MAN_DESC><FIELD_1>D00</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>20</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF200</MAN_DESC><FIELD_1>NF200</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>21</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF600</MAN_DESC><FIELD_1>NF600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>22</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1000</MAN_DESC><FIELD_1>NF1000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>23</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1600</MAN_DESC><FIELD_1>NF1600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>24</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF2000</MAN_DESC><FIELD_1>NF2000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>26</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A280</MAN_DESC><FIELD_1>A280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>27</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A380</MAN_DESC><FIELD_1>A380</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>28</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A680</MAN_DESC><FIELD_1>A680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>29</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A980</MAN_DESC><FIELD_1>A980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>31</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S280</MAN_DESC><FIELD_1>S280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>32</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S380</MAN_DESC><FIELD_1>S380</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>33</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S680</MAN_DESC><FIELD_1>S680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>34</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S980</MAN_DESC><FIELD_1>S980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>35</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S1080</MAN_DESC><FIELD_1>S1080</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>36</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS100</MAN_DESC><FIELD_1>NOAS100</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>37</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS500</MAN_DESC><FIELD_1>NOAS500</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>38</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS1000</MAN_DESC><FIELD_1>NOAS1000</FIELD_1><CLASS_ID/></Record><Record1><TotalCount>48</TotalCount></Record1></RecordSet>"
 }
2018-04-08 23:59:40,558 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:59:58,948 INFO [Logger.py:47]  start test manufacturer
2018-04-08 23:59:59,254 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/bmpObjQuery.xml
2018-04-08 23:59:59,255 INFO [Logger.py:47]  正则模型：['<test1>(.*?)</test1>', '<node2>(.*?)</node2>', '<node3>(.*?)</node3>', '<manufacturer>(.*?)</manufacturer>']
2018-04-08 23:59:59,256 INFO [Logger.py:47]  获取参数：['<SqlQuery><IsPageResult>1</IsPageResult><PageInfo><PageSize>20</PageSize><CurrentPage>1</CurrentPage><RowCount>0</RowCount><PageCount>0</PageCount><OrderBy></OrderBy></PageInfo><QueryTable><TableName>BMP_MANUFACTURERS</TableName><AliasName></AliasName></QueryTable><OrderString></OrderString><Conditions></Conditions></SqlQuery>']
2018-04-08 23:59:59,256 INFO [Logger.py:47]  匹配正则: <manufacturer>(.*?)</manufacturer>
2018-04-08 23:59:59,285 INFO [Logger.py:47]  the result is (WSResult){
   errorCode = 0
   errorString = None
   resultVal = "<?xml version="1.0" encoding="UTF-8"?>
<RecordSet><Record><MAN_ID type="INT">5</MAN_ID><MAN_NAME type="VARCHAR">腾博</MAN_NAME><MAN_DESC type="VARCHAR">tenberg</MAN_DESC><FIELD_1 type="VARCHAR">500</FIELD_1><CLASS_ID type="INT">10464</CLASS_ID></Record><Record><MAN_ID>6</MAN_ID><MAN_NAME>数码视讯</MAN_NAME><MAN_DESC>sumavision</MAN_DESC><FIELD_1>C00</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>7</MAN_ID><MAN_NAME>戴尔</MAN_NAME><MAN_DESC>DELL</MAN_DESC><FIELD_1>D00</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>20</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF200</MAN_DESC><FIELD_1>NF200</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>21</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF600</MAN_DESC><FIELD_1>NF600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>22</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1000</MAN_DESC><FIELD_1>NF1000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>23</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1600</MAN_DESC><FIELD_1>NF1600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>24</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF2000</MAN_DESC><FIELD_1>NF2000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>26</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A280</MAN_DESC><FIELD_1>A280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>27</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A380</MAN_DESC><FIELD_1>A380</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>28</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A680</MAN_DESC><FIELD_1>A680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>29</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A980</MAN_DESC><FIELD_1>A980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>31</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S280</MAN_DESC><FIELD_1>S280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>32</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S380</MAN_DESC><FIELD_1>S380</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>33</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S680</MAN_DESC><FIELD_1>S680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>34</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S980</MAN_DESC><FIELD_1>S980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>35</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S1080</MAN_DESC><FIELD_1>S1080</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>36</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS100</MAN_DESC><FIELD_1>NOAS100</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>37</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS500</MAN_DESC><FIELD_1>NOAS500</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>38</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS1000</MAN_DESC><FIELD_1>NOAS1000</FIELD_1><CLASS_ID/></Record><Record1><TotalCount>48</TotalCount></Record1></RecordSet>"
 }
2018-04-08 23:59:59,285 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-08 23:59:59,286 INFO [Logger.py:47]  parse xml get total:48
2018-04-08 23:59:59,299 INFO [Logger.py:47]  select count(1) from bmp_manufacturers
2018-04-08 23:59:59,299 INFO [Logger.py:47]  the result: ((48,),)
2018-04-08 23:59:59,299 INFO [Logger.py:47]  paras xml get tag value ['5', '6', '7', '20', '21', '22', '23', '24', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38']
2018-04-08 23:59:59,304 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-08 23:59:59,304 INFO [Logger.py:47]  the result: ((5,), (6,), (7,), (20,), (21,), (22,), (23,), (24,), (26,), (27,), (28,), (29,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,))

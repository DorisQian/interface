2018-04-09 00:00:49,005 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-09 00:00:49,007 INFO [Logger.py:47]  paras xml get tag value ['5', '6', '7', '20', '21', '22', '23', '24', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38']
2018-04-09 00:01:49,856 INFO [Logger.py:47]  start test manufacturer
2018-04-09 00:01:50,185 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/bmpObjQuery.xml
2018-04-09 00:01:50,185 INFO [Logger.py:47]  正则模型：['<test1>(.*?)</test1>', '<node2>(.*?)</node2>', '<node3>(.*?)</node3>', '<manufacturer>(.*?)</manufacturer>']
2018-04-09 00:01:50,186 INFO [Logger.py:47]  获取参数：['<SqlQuery><IsPageResult>1</IsPageResult><PageInfo><PageSize>20</PageSize><CurrentPage>1</CurrentPage><RowCount>0</RowCount><PageCount>0</PageCount><OrderBy></OrderBy></PageInfo><QueryTable><TableName>BMP_MANUFACTURERS</TableName><AliasName></AliasName></QueryTable><OrderString></OrderString><Conditions></Conditions></SqlQuery>']
2018-04-09 00:01:50,186 INFO [Logger.py:47]  匹配正则: <manufacturer>(.*?)</manufacturer>
2018-04-09 00:01:50,234 INFO [Logger.py:47]  the result is (WSResult){
   errorCode = 0
   errorString = None
   resultVal = "<?xml version="1.0" encoding="UTF-8"?>
<RecordSet><Record><MAN_ID type="INT">5</MAN_ID><MAN_NAME type="VARCHAR">腾博</MAN_NAME><MAN_DESC type="VARCHAR">tenberg</MAN_DESC><FIELD_1 type="VARCHAR">500</FIELD_1><CLASS_ID type="INT">10464</CLASS_ID></Record><Record><MAN_ID>6</MAN_ID><MAN_NAME>数码视讯</MAN_NAME><MAN_DESC>sumavision</MAN_DESC><FIELD_1>C00</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>7</MAN_ID><MAN_NAME>戴尔</MAN_NAME><MAN_DESC>DELL</MAN_DESC><FIELD_1>D00</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>20</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF200</MAN_DESC><FIELD_1>NF200</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>21</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF600</MAN_DESC><FIELD_1>NF600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>22</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1000</MAN_DESC><FIELD_1>NF1000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>23</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1600</MAN_DESC><FIELD_1>NF1600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>24</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF2000</MAN_DESC><FIELD_1>NF2000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>26</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A280</MAN_DESC><FIELD_1>A280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>27</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A380</MAN_DESC><FIELD_1>A380</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>28</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A680</MAN_DESC><FIELD_1>A680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>29</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A980</MAN_DESC><FIELD_1>A980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>31</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S280</MAN_DESC><FIELD_1>S280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>32</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S380</MAN_DESC><FIELD_1>S380</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>33</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S680</MAN_DESC><FIELD_1>S680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>34</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S980</MAN_DESC><FIELD_1>S980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>35</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S1080</MAN_DESC><FIELD_1>S1080</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>36</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS100</MAN_DESC><FIELD_1>NOAS100</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>37</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS500</MAN_DESC><FIELD_1>NOAS500</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>38</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS1000</MAN_DESC><FIELD_1>NOAS1000</FIELD_1><CLASS_ID/></Record><Record1><TotalCount>48</TotalCount></Record1></RecordSet>"
 }
2018-04-09 00:01:50,234 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-09 00:01:50,236 INFO [Logger.py:47]  parse xml get total:48
2018-04-09 00:01:50,242 INFO [Logger.py:47]  select count(1) from bmp_manufacturers
2018-04-09 00:01:50,242 INFO [Logger.py:47]  the result: ((48,),)
2018-04-09 00:01:50,243 INFO [Logger.py:47]  mysql resutl is 48
2018-04-09 00:01:50,243 INFO [Logger.py:47]  paras xml get tag value ['5', '6', '7', '20', '21', '22', '23', '24', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38']
2018-04-09 00:01:50,260 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-09 00:01:50,260 INFO [Logger.py:47]  the result: ((5,), (6,), (7,), (20,), (21,), (22,), (23,), (24,), (26,), (27,), (28,), (29,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,))
2018-04-09 00:06:27,114 INFO [Logger.py:47]  start test manufacturer
2018-04-09 00:06:28,383 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/bmpObjQuery.xml
2018-04-09 00:06:28,384 INFO [Logger.py:47]  正则模型：['<test1>(.*?)</test1>', '<node2>(.*?)</node2>', '<node3>(.*?)</node3>', '<manufacturer>(.*?)</manufacturer>']
2018-04-09 00:06:28,384 INFO [Logger.py:47]  获取参数：['<SqlQuery><IsPageResult>1</IsPageResult><PageInfo><PageSize>20</PageSize><CurrentPage>1</CurrentPage><RowCount>0</RowCount><PageCount>0</PageCount><OrderBy></OrderBy></PageInfo><QueryTable><TableName>BMP_MANUFACTURERS</TableName><AliasName></AliasName></QueryTable><OrderString></OrderString><Conditions></Conditions></SqlQuery>']
2018-04-09 00:06:28,385 INFO [Logger.py:47]  匹配正则: <manufacturer>(.*?)</manufacturer>
2018-04-09 00:06:28,423 INFO [Logger.py:47]  the result is (WSResult){
   errorCode = 0
   errorString = None
   resultVal = "<?xml version="1.0" encoding="UTF-8"?>
<RecordSet><Record><MAN_ID type="INT">5</MAN_ID><MAN_NAME type="VARCHAR">腾博</MAN_NAME><MAN_DESC type="VARCHAR">tenberg</MAN_DESC><FIELD_1 type="VARCHAR">500</FIELD_1><CLASS_ID type="INT">10464</CLASS_ID></Record><Record><MAN_ID>6</MAN_ID><MAN_NAME>数码视讯</MAN_NAME><MAN_DESC>sumavision</MAN_DESC><FIELD_1>C00</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>7</MAN_ID><MAN_NAME>戴尔</MAN_NAME><MAN_DESC>DELL</MAN_DESC><FIELD_1>D00</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>20</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF200</MAN_DESC><FIELD_1>NF200</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>21</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF600</MAN_DESC><FIELD_1>NF600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>22</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1000</MAN_DESC><FIELD_1>NF1000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>23</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1600</MAN_DESC><FIELD_1>NF1600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>24</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF2000</MAN_DESC><FIELD_1>NF2000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>26</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A280</MAN_DESC><FIELD_1>A280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>27</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A380</MAN_DESC><FIELD_1>A380</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>28</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A680</MAN_DESC><FIELD_1>A680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>29</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A980</MAN_DESC><FIELD_1>A980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>31</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S280</MAN_DESC><FIELD_1>S280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>32</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S380</MAN_DESC><FIELD_1>S380</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>33</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S680</MAN_DESC><FIELD_1>S680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>34</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S980</MAN_DESC><FIELD_1>S980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>35</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S1080</MAN_DESC><FIELD_1>S1080</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>36</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS100</MAN_DESC><FIELD_1>NOAS100</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>37</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS500</MAN_DESC><FIELD_1>NOAS500</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>38</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS1000</MAN_DESC><FIELD_1>NOAS1000</FIELD_1><CLASS_ID/></Record><Record1><TotalCount>48</TotalCount></Record1></RecordSet>"
 }
2018-04-09 00:06:28,424 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-09 00:06:28,424 INFO [Logger.py:47]  parse xml get total:48
2018-04-09 00:06:28,430 INFO [Logger.py:47]  select count(1) from bmp_manufacturers
2018-04-09 00:06:28,430 INFO [Logger.py:47]  the result: ((48,),)
2018-04-09 00:06:28,431 INFO [Logger.py:47]  mysql result is 48
2018-04-09 00:06:28,431 INFO [Logger.py:47]  paras xml get tag value ['5', '6', '7', '20', '21', '22', '23', '24', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38']
2018-04-09 00:06:28,444 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-09 00:06:28,444 INFO [Logger.py:47]  the result: ((5,), (6,), (7,), (20,), (21,), (22,), (23,), (24,), (26,), (27,), (28,), (29,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,))
2018-04-09 00:06:28,445 INFO [Logger.py:47]  id_xml_list: ['5', '6', '7', '20', '21', '22', '23', '24', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38']
2018-04-09 00:06:28,445 INFO [Logger.py:47]  id_database_list: [5, 6, 7, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38]
2018-04-09 00:07:11,285 INFO [Logger.py:47]  start test manufacturer
2018-04-09 00:07:11,446 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/bmpObjQuery.xml
2018-04-09 00:07:11,447 INFO [Logger.py:47]  正则模型：['<test1>(.*?)</test1>', '<node2>(.*?)</node2>', '<node3>(.*?)</node3>', '<manufacturer>(.*?)</manufacturer>']
2018-04-09 00:07:11,448 INFO [Logger.py:47]  获取参数：['<SqlQuery><IsPageResult>1</IsPageResult><PageInfo><PageSize>20</PageSize><CurrentPage>1</CurrentPage><RowCount>0</RowCount><PageCount>0</PageCount><OrderBy></OrderBy></PageInfo><QueryTable><TableName>BMP_MANUFACTURERS</TableName><AliasName></AliasName></QueryTable><OrderString></OrderString><Conditions></Conditions></SqlQuery>']
2018-04-09 00:07:11,449 INFO [Logger.py:47]  匹配正则: <manufacturer>(.*?)</manufacturer>
2018-04-09 00:07:11,477 INFO [Logger.py:47]  the result is (WSResult){
   errorCode = 0
   errorString = None
   resultVal = "<?xml version="1.0" encoding="UTF-8"?>
<RecordSet><Record><MAN_ID type="INT">5</MAN_ID><MAN_NAME type="VARCHAR">腾博</MAN_NAME><MAN_DESC type="VARCHAR">tenberg</MAN_DESC><FIELD_1 type="VARCHAR">500</FIELD_1><CLASS_ID type="INT">10464</CLASS_ID></Record><Record><MAN_ID>6</MAN_ID><MAN_NAME>数码视讯</MAN_NAME><MAN_DESC>sumavision</MAN_DESC><FIELD_1>C00</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>7</MAN_ID><MAN_NAME>戴尔</MAN_NAME><MAN_DESC>DELL</MAN_DESC><FIELD_1>D00</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>20</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF200</MAN_DESC><FIELD_1>NF200</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>21</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF600</MAN_DESC><FIELD_1>NF600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>22</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1000</MAN_DESC><FIELD_1>NF1000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>23</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1600</MAN_DESC><FIELD_1>NF1600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>24</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF2000</MAN_DESC><FIELD_1>NF2000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>26</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A280</MAN_DESC><FIELD_1>A280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>27</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A380</MAN_DESC><FIELD_1>A380</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>28</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A680</MAN_DESC><FIELD_1>A680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>29</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A980</MAN_DESC><FIELD_1>A980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>31</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S280</MAN_DESC><FIELD_1>S280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>32</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S380</MAN_DESC><FIELD_1>S380</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>33</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S680</MAN_DESC><FIELD_1>S680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>34</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S980</MAN_DESC><FIELD_1>S980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>35</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S1080</MAN_DESC><FIELD_1>S1080</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>36</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS100</MAN_DESC><FIELD_1>NOAS100</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>37</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS500</MAN_DESC><FIELD_1>NOAS500</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>38</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS1000</MAN_DESC><FIELD_1>NOAS1000</FIELD_1><CLASS_ID/></Record><Record1><TotalCount>48</TotalCount></Record1></RecordSet>"
 }
2018-04-09 00:07:11,477 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-09 00:07:11,478 INFO [Logger.py:47]  parse xml get total:48
2018-04-09 00:07:11,487 INFO [Logger.py:47]  select count(1) from bmp_manufacturers
2018-04-09 00:07:11,487 INFO [Logger.py:47]  the result: ((48,),)
2018-04-09 00:07:11,487 INFO [Logger.py:47]  mysql result is 48
2018-04-09 00:07:11,488 INFO [Logger.py:47]  paras xml get tag value [5, 6, 7, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38]
2018-04-09 00:07:11,502 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-09 00:07:11,503 INFO [Logger.py:47]  the result: ((5,), (6,), (7,), (20,), (21,), (22,), (23,), (24,), (26,), (27,), (28,), (29,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,))
2018-04-09 00:07:11,503 INFO [Logger.py:47]  id_xml_list: [5, 6, 7, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38]
2018-04-09 00:07:11,504 INFO [Logger.py:47]  id_database_list: [5, 6, 7, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38]
2018-04-09 00:10:30,197 INFO [Logger.py:47]  start test manufacturer
2018-04-09 00:10:30,555 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/bmpObjQuery.xml
2018-04-09 00:10:30,556 INFO [Logger.py:47]  正则模型：['<test1>(.*?)</test1>', '<node2>(.*?)</node2>', '<node3>(.*?)</node3>', '<manufacturer>(.*?)</manufacturer>']
2018-04-09 00:10:30,556 INFO [Logger.py:47]  获取参数：['<SqlQuery><IsPageResult>1</IsPageResult><PageInfo><PageSize>20</PageSize><CurrentPage>1</CurrentPage><RowCount>0</RowCount><PageCount>0</PageCount><OrderBy></OrderBy></PageInfo><QueryTable><TableName>BMP_MANUFACTURERS</TableName><AliasName></AliasName></QueryTable><OrderString></OrderString><Conditions></Conditions></SqlQuery>']
2018-04-09 00:10:30,557 INFO [Logger.py:47]  匹配正则: <manufacturer>(.*?)</manufacturer>
2018-04-09 00:10:30,597 INFO [Logger.py:47]  the result is (WSResult){
   errorCode = 0
   errorString = None
   resultVal = "<?xml version="1.0" encoding="UTF-8"?>
<RecordSet><Record><MAN_ID type="INT">5</MAN_ID><MAN_NAME type="VARCHAR">腾博</MAN_NAME><MAN_DESC type="VARCHAR">tenberg</MAN_DESC><FIELD_1 type="VARCHAR">500</FIELD_1><CLASS_ID type="INT">10464</CLASS_ID></Record><Record><MAN_ID>6</MAN_ID><MAN_NAME>数码视讯</MAN_NAME><MAN_DESC>sumavision</MAN_DESC><FIELD_1>C00</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>7</MAN_ID><MAN_NAME>戴尔</MAN_NAME><MAN_DESC>DELL</MAN_DESC><FIELD_1>D00</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>20</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF200</MAN_DESC><FIELD_1>NF200</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>21</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF600</MAN_DESC><FIELD_1>NF600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>22</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1000</MAN_DESC><FIELD_1>NF1000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>23</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1600</MAN_DESC><FIELD_1>NF1600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>24</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF2000</MAN_DESC><FIELD_1>NF2000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>26</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A280</MAN_DESC><FIELD_1>A280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>27</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A380</MAN_DESC><FIELD_1>A380</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>28</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A680</MAN_DESC><FIELD_1>A680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>29</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A980</MAN_DESC><FIELD_1>A980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>31</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S280</MAN_DESC><FIELD_1>S280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>32</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S380</MAN_DESC><FIELD_1>S380</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>33</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S680</MAN_DESC><FIELD_1>S680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>34</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S980</MAN_DESC><FIELD_1>S980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>35</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S1080</MAN_DESC><FIELD_1>S1080</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>36</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS100</MAN_DESC><FIELD_1>NOAS100</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>37</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS500</MAN_DESC><FIELD_1>NOAS500</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>38</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS1000</MAN_DESC><FIELD_1>NOAS1000</FIELD_1><CLASS_ID/></Record><Record1><TotalCount>48</TotalCount></Record1></RecordSet>"
 }
2018-04-09 00:10:30,597 INFO [Logger.py:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-09 00:10:30,599 INFO [Logger.py:47]  parse xml get total:48
2018-04-09 00:10:30,609 INFO [Logger.py:47]  select count(1) from bmp_manufacturers
2018-04-09 00:10:30,610 INFO [Logger.py:47]  the result: ((48,),)
2018-04-09 00:10:30,610 INFO [Logger.py:47]  mysql result is 48
2018-04-09 00:10:30,611 INFO [Logger.py:47]  paras xml get tag value ['5', '6', '7', '20', '21', '22', '23', '24', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38']
2018-04-09 00:10:30,619 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-09 00:10:30,620 INFO [Logger.py:47]  the result: ((5,), (6,), (7,), (20,), (21,), (22,), (23,), (24,), (26,), (27,), (28,), (29,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,))
2018-04-09 00:10:30,620 INFO [Logger.py:47]  id_xml_list: [5, 6, 7, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38]
2018-04-09 00:10:30,621 INFO [Logger.py:47]  id_database_list: [5, 6, 7, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38]
2018-04-09 00:13:19,577 INFO [root:47]  start test manufacturer
2018-04-09 00:13:19,942 INFO [root:47]  解析参数文件: /Users/doris/study/python/interface/data/bmpObjQuery.xml
2018-04-09 00:13:19,943 INFO [root:47]  正则模型：['<test1>(.*?)</test1>', '<node2>(.*?)</node2>', '<node3>(.*?)</node3>', '<manufacturer>(.*?)</manufacturer>']
2018-04-09 00:13:19,943 INFO [root:47]  获取参数：['<SqlQuery><IsPageResult>1</IsPageResult><PageInfo><PageSize>20</PageSize><CurrentPage>1</CurrentPage><RowCount>0</RowCount><PageCount>0</PageCount><OrderBy></OrderBy></PageInfo><QueryTable><TableName>BMP_MANUFACTURERS</TableName><AliasName></AliasName></QueryTable><OrderString></OrderString><Conditions></Conditions></SqlQuery>']
2018-04-09 00:13:19,944 INFO [root:47]  匹配正则: <manufacturer>(.*?)</manufacturer>
2018-04-09 00:13:19,978 INFO [root:47]  the result is (WSResult){
   errorCode = 0
   errorString = None
   resultVal = "<?xml version="1.0" encoding="UTF-8"?>
<RecordSet><Record><MAN_ID type="INT">5</MAN_ID><MAN_NAME type="VARCHAR">腾博</MAN_NAME><MAN_DESC type="VARCHAR">tenberg</MAN_DESC><FIELD_1 type="VARCHAR">500</FIELD_1><CLASS_ID type="INT">10464</CLASS_ID></Record><Record><MAN_ID>6</MAN_ID><MAN_NAME>数码视讯</MAN_NAME><MAN_DESC>sumavision</MAN_DESC><FIELD_1>C00</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>7</MAN_ID><MAN_NAME>戴尔</MAN_NAME><MAN_DESC>DELL</MAN_DESC><FIELD_1>D00</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>20</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF200</MAN_DESC><FIELD_1>NF200</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>21</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF600</MAN_DESC><FIELD_1>NF600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>22</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1000</MAN_DESC><FIELD_1>NF1000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>23</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF1600</MAN_DESC><FIELD_1>NF1600</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>24</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NF2000</MAN_DESC><FIELD_1>NF2000</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>26</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A280</MAN_DESC><FIELD_1>A280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>27</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A380</MAN_DESC><FIELD_1>A380</FIELD_1><CLASS_ID>10471</CLASS_ID></Record><Record><MAN_ID>28</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A680</MAN_DESC><FIELD_1>A680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>29</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>A980</MAN_DESC><FIELD_1>A980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>31</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S280</MAN_DESC><FIELD_1>S280</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>32</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S380</MAN_DESC><FIELD_1>S380</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>33</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S680</MAN_DESC><FIELD_1>S680</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>34</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S980</MAN_DESC><FIELD_1>S980</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>35</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>S1080</MAN_DESC><FIELD_1>S1080</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>36</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS100</MAN_DESC><FIELD_1>NOAS100</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>37</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS500</MAN_DESC><FIELD_1>NOAS500</FIELD_1><CLASS_ID/></Record><Record><MAN_ID>38</MAN_ID><MAN_NAME>安信华</MAN_NAME><MAN_DESC>NOAS1000</MAN_DESC><FIELD_1>NOAS1000</FIELD_1><CLASS_ID/></Record><Record1><TotalCount>48</TotalCount></Record1></RecordSet>"
 }
2018-04-09 00:13:19,979 INFO [root:47]  解析参数文件: /Users/doris/study/python/interface/data/result.xml
2018-04-09 00:13:19,980 INFO [root:47]  parse xml get total:48
2018-04-09 00:13:19,987 INFO [root:47]  select count(1) from bmp_manufacturers
2018-04-09 00:13:19,989 INFO [root:47]  the result: ((48,),)
2018-04-09 00:13:19,989 INFO [root:47]  mysql result is 48
2018-04-09 00:13:19,989 INFO [root:47]  paras xml get tag value ['5', '6', '7', '20', '21', '22', '23', '24', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38']
2018-04-09 00:13:20,004 INFO [root:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-09 00:13:20,005 INFO [root:47]  the result: ((5,), (6,), (7,), (20,), (21,), (22,), (23,), (24,), (26,), (27,), (28,), (29,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,))
2018-04-09 00:13:20,005 INFO [root:47]  id_xml_list: [5, 6, 7, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38]
2018-04-09 00:13:20,006 INFO [root:47]  id_database_list: [5, 6, 7, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38]
2018-04-09 00:15:34,542 INFO [Logger.py:47]  select MAN_ID from bmp_manufacturers limit 20
2018-04-09 00:15:34,543 INFO [Logger.py:47]  the result: ((5,), (6,), (7,), (20,), (21,), (22,), (23,), (24,), (26,), (27,), (28,), (29,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,))
